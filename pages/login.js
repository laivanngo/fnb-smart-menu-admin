// T·ªáp: pages/login.js (ƒê√É S·ª¨A L·ªñI HARD-CODE)
// M·ª•c ƒë√≠ch: Trang ƒëƒÉng nh·∫≠p cho Admin Dashboard.

import { useState } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
// ƒê·∫£m b·∫£o bi·∫øn n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng
const apiUrl = process.env.NEXT_PUBLIC_API_URL; 

export default function LoginPage() {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const router = useRouter();

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');
        setIsLoading(true);

        // Ki·ªÉm tra xem apiUrl c√≥ t·ªìn t·∫°i kh√¥ng
        if (!apiUrl) {
            setError("L·ªói c·∫•u h√¨nh: API URL ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. Vui l√≤ng ki·ªÉm tra file .env.local ho·∫∑c c·∫•u h√¨nh build.");
            setIsLoading(false);
            return;
        }

        let response; // Khai b√°o response ·ªü ƒë√¢y ƒë·ªÉ d√πng trong c·∫£ try/catch
        try {
            const formData = new URLSearchParams();
            formData.append('username', username);
            formData.append('password', password);

            // === S·ª¨A L·ªñI T·∫†I ƒê√ÇY ===
            // ƒê√£ thay th·∫ø 'http://127.0.0.1:8000/admin/token' b·∫±ng `${apiUrl}/admin/token`
            response = await fetch(`${apiUrl}/admin/token`, { // ƒê·ªãa ch·ªâ Backend
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: formData,
            });

            // === KI·ªÇM TRA PH·∫¢N H·ªíI NGAY L·∫¨P T·ª®C ===
            if (!response.ok) {
                let errorDetail = 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i';
                try {
                    // C·ªë g·∫Øng ƒë·ªçc l·ªói c·ª• th·ªÉ t·ª´ Backend (n·∫øu c√≥)
                    const errorData = await response.json();
                    errorDetail = errorData.detail || errorDetail;
                } catch (jsonError) {
                    // N·∫øu Backend kh√¥ng tr·∫£ v·ªÅ l·ªói JSON, d√πng status text
                    errorDetail = `L·ªói ${response.status}: ${response.statusText}`;
                }
                // N√©m l·ªói ƒë·ªÉ nh·∫£y v√†o kh·ªëi catch b√™n d∆∞·ªõi
                throw new Error(errorDetail);
            }

            // === X·ª¨ L√ù KHI TH√ÄNH C√îNG ===
            // Ch·ªâ parse JSON n·∫øu response.ok
            const data = await response.json();

            // L∆∞u "Th·∫ª t·ª´" (token) v√†o localStorage
            localStorage.setItem('admin_token', data.access_token);

            // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang dashboard ch√≠nh (SAU KHI L∆ØU TOKEN)
            router.push('/dashboard');
            // Kh√¥ng c·∫ßn setIsLoading(false) v√¨ ƒë√£ chuy·ªÉn trang

        } catch (err) {
            // === X·ª¨ L√ù L·ªñI CHI TI·∫æT H∆†N ===
            console.error("Chi ti·∫øt l·ªói ƒêƒÉng nh·∫≠p:", err); // In l·ªói ƒë·∫ßy ƒë·ªß ra Console

            // Ph√¢n bi·ªát l·ªói m·∫°ng v√† l·ªói ·ª©ng d·ª•ng
            if (err instanceof TypeError && err.message.includes('Failed to fetch')) {
                 setError(`Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß Backend t·∫°i: ${apiUrl}. Vui l√≤ng ki·ªÉm tra l·∫°i.`);
            } else {
                 // Hi·ªÉn th·ªã l·ªói t·ª´ Backend ho·∫∑c l·ªói chung
                 setError(err.message || 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.');
            }
            setIsLoading(false); // K·∫øt th√∫c loading KHI C√ì L·ªñI
        }
        // B·ªè setIsLoading(false) ·ªü ƒë√¢y, ch·ªâ set khi c√≥ l·ªói
    };

    // (Ph·∫ßn return v√† styles gi·ªØ nguy√™n nh∆∞ c≈©)
    return (
        <>
        <Head>
            <title>ƒêƒÉng nh·∫≠p Qu·∫£n tr·ªã - FNB Smart Menu</title>
        </Head>
        <div style={styles.container}>
            <h1 style={styles.title}>üîë ƒêƒÉng nh·∫≠p Qu·∫£n tr·ªã</h1>
            <form onSubmit={handleSubmit} style={styles.form}>
                {/* ... input username ... */}
                 <div style={styles.inputGroup}>
                        <label htmlFor="username" style={styles.label}>T√™n ƒëƒÉng nh·∫≠p:</label>
                        <input
                            id="username"
                            type="text"
                            value={username}
                            onChange={(e) => setUsername(e.target.value)}
                            style={styles.input}
                            required
                        />
                    </div>
                {/* ... input password ... */}
                 <div style={styles.inputGroup}>
                        <label htmlFor="password" style={styles.label}>M·∫≠t kh·∫©u:</label>
                        <input
                            id="password"
                            type="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            style={styles.input}
                            required
                        />
                    </div>
                {error && <p style={styles.error}>{error}</p>}
                <button type="submit" style={isLoading ? {...styles.button, ...styles.buttonDisabled} : styles.button} disabled={isLoading}>
                    {isLoading ? 'ƒêang x·ª≠ l√Ω...' : 'ƒêƒÉng nh·∫≠p'}
                </button>
            </form>
        </div>
        </>
    );
}

// --- CSS n·ªôi b·ªô (Inline Styles) ---
const styles = {
    container: { display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', minHeight: '100vh', background: '#f0f2f5' },
    title: { marginBottom: '30px', color: '#333' },
    form: { background: 'white', padding: '40px', borderRadius: '8px', boxShadow: '0 4px 12px rgba(0,0,0,0.1)', width: '100%', maxWidth: '400px' },
    inputGroup: { marginBottom: '20px' },
    label: { display: 'block', marginBottom: '5px', fontWeight: '600', color: '#555' },
    input: { width: '100%', padding: '12px', border: '1px solid #ccc', borderRadius: '4px', fontSize: '1rem' },
    error: { color: 'red', marginBottom: '15px', textAlign: 'center', fontSize: '0.9rem' },
    button: { width: '100%', padding: '12px', background: '#667eea', color: 'white', border: 'none', borderRadius: '4px', fontSize: '1rem', fontWeight: '600', cursor: 'pointer', transition: 'background 0.2s' },
    buttonDisabled: { background: '#ccc', cursor: 'not-allowed' }
};